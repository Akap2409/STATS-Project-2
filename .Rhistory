library(formatR)
lifeexp <- read.csv("lifeexp_by_country2.csv", header = TRUE)
lifeexp$status <- factor(lifeexp$status)
lifeexp$continent <- factor(lifeexp$continent)
lifeexp$sub_region <- factor(lifeexp$sub_region)
lifeexp$thin_youth <- ordered(lifeexp$thin_youth, levels = c("Low", "Medium", "High"))
lifeexp$thin_child <- ordered(lifeexp$thin_child, levels = c("Low", "Medium", "High"))
lifeexp$mortality_level <- ordered(lifeexp$mortality_level, levels = c("Low", "Moderate", "High"))
View(lifeexp)
t.test(lifeexp$measles, alternative = "greater", mu = 250, conf.level = 0.94)
t.test(lifeexp$status, alternative = "two.sided", conf.level = 0.99)
t.test(lifeexp$status, lifeexp$status alternative = "two.sided", conf.level = 0.99)
lifeexp <- read.csv("lifeexp_by_country2.csv", header = TRUE)
lifeexp$status <- factor(lifeexp$status)
lifeexp$continent <- factor(lifeexp$continent)
lifeexp$sub_region <- factor(lifeexp$sub_region)
lifeexp$thin_youth <- ordered(lifeexp$thin_youth, levels = c("Low", "Medium", "High"))
lifeexp$thin_child <- ordered(lifeexp$thin_child, levels = c("Low", "Medium", "High"))
lifeexp$mortality_level <- ordered(lifeexp$mortality_level, levels = c("Low", "Moderate", "High"))
t.test(lifeexp$measles, alternative = "greater", mu = 250, conf.level = 0.94)
lifeexp <- read.csv("lifeexp_by_country2.csv", header = TRUE)
lifeexp$status <- factor(lifeexp$status)
lifeexp$continent <- factor(lifeexp$continent)
lifeexp$sub_region <- factor(lifeexp$sub_region)
lifeexp$thin_youth <- ordered(lifeexp$thin_youth, levels = c("Low", "Medium", "High"))
lifeexp$thin_child <- ordered(lifeexp$thin_child, levels = c("Low", "Medium", "High"))
lifeexp$mortality_level <- ordered(lifeexp$mortality_level, levels = c("Low", "Moderate", "High"))
t.test(lifeexp$measles, alternative = "greater", mu = 250, conf.level = 0.94)
t.test(lifeexp$status, lifeexp$status alternative = "two.sided", conf.level = 0.99)
t.test(lifeexp$status ~ lifeexp$status alternative = "two.sided", conf.level = 0.99)
wilcox.test(Developing, Developed, alternative = "two.sided", conf.level = 0.99)
t.test(lifeexp$schooling ~ lifeexp$status, data = lifeexp, alternative = "two.sided", conf.level = 0.99)
t.test(lifeexp$schooling ~ lifeexp$status, data = lifeexp, alternative = "two.sided", conf.level = 0.99)
t.test(lifeexp$schooling ~ lifeexp$status, data = lifeexp, alternative = "two.sided", conf.level = 0.99)
chisq.test(lifeexp$mortality_level, lifeexp$thin_youth, correct = FALSE, conf.level = 0.98)
chisq.test(lifeexp$mortality_level ~ lifeexp$thin_youth, correct = FALSE, conf.level = 0.98)
plot(lifeexp$income.composition.of.resources, lifeexp$life.expectancy, xlab = "Income Composition of Resources", ylab = "Life Expectancy")
abline(lm(lifeexp$life.expectancy ~ lifeexp$income.composition.of.resources), col = "red")
qqnorm(lm(lifeexp$life.expectancy ~ lifeexp$income.composition.of.resources)$residuals)
qqline(lm(lifeexp$life.expectancy ~ lifeexp$income.composition.of.resources)$residuals)
plot(lm(lifeexp$life.expectancy ~ lifeexp$income.composition.of.resources)$residuals ~ lm(lifeexp$life.expectancy ~ lifeexp$income.composition.of.resources)$fitted.values, xlab = "Fitted Values", ylab = "Residuals")
abline(h = 0, col = "red")
plot(lifeexp$income.composition.of.resources, lifeexp$life.expectancy, xlab = "Income Composition of Resources", ylab = "Life Expectancy")
abline(lm(lifeexp$life.expectancy ~ lifeexp$income.composition.of.resources), col = "red")
qqnorm(lm(lifeexp$life.expectancy ~ lifeexp$income.composition.of.resources)$residuals)
qqline(lm(lifeexp$life.expectancy ~ lifeexp$income.composition.of.resources)$residuals)
plot(lm(lifeexp$life.expectancy ~ lifeexp$income.composition.of.resources)$residuals ~ lm(lifeexp$life.expectancy ~ lifeexp$income.composition.of.resources)$fitted.values, xlab = "Fitted Values", ylab = "Residuals")
abline(h = 0, col = "red")
plot(lm(lifeexp$life.expectancy ~ lifeexp$income.composition.of.resources)$residuals ~ lm(lifeexp$life.expectancy ~ lifeexp$income.composition.of.resources)$fitted.values, xlab = "Fitted Values", ylab = "Residuals")
abline(h = 0, col = "red")
```
plot(lm(lifeexp$life.expectancy ~ lifeexp$income.composition.of.resources)$residuals ~ lm(lifeexp$life.expectancy ~ lifeexp$income.composition.of.resources)$fitted.values, xlab = "Fitted Values", ylab = "Residuals")
abline(h = 0, col = "red")
```
plot(lm(lifeexp$life.expectancy ~ lifeexp$income.composition.of.resources)$residuals ~ lm(lifeexp$life.expectancy ~ lifeexp$income.composition.of.resources)$fitted.values, xlab = "Fitted Values", ylab = "Residuals")
abline(h = 0, col = "red")
```
abline(h = 0, col = "red")
plot(lifeexp$income.composition.of.resources, lifeexp$life.expectancy, xlab = "Income Composition of Resources", ylab = "Life Expectancy")
abline(lm(lifeexp$life.expectancy ~ lifeexp$income.composition.of.resources), col = "red")
qqnorm(lm(lifeexp$life.expectancy ~ lifeexp$income.composition.of.resources)$residuals)
qqline(lm(lifeexp$life.expectancy ~ lifeexp$income.composition.of.resources)$residuals)
plot(lm(lifeexp$life.expectancy ~ lifeexp$income.composition.of.resources)$residuals ~ lm(lifeexp$life.expectancy ~ lifeexp$income.composition.of.resources)$fitted.values, xlab = "Fitted Values", ylab = "Residuals")
abline(h = 0, col = "red")
reg_model <- lm(life.expectancy ~ income.composition.of.resources, data = lifeexp)
summary(reg_model)
cor(lifeexp$life.expectancy, lifeexp$income.composition.of.resources)
summary(reg_model)$r.squared
plot(lifeexp$income.composition.of.resources, lifeexp$life.expectancy, xlab = "Income Composition of Resources", ylab = "Life Expectancy")
abline(lm(lifeexp$life.expectancy ~ lifeexp$income.composition.of.resources), col = "red")
qqnorm(lm(lifeexp$life.expectancy ~ lifeexp$income.composition.of.resources)$residuals)
qqline(lm(lifeexp$life.expectancy ~ lifeexp$income.composition.of.resources)$residuals)
plot(lm(lifeexp$life.expectancy ~ lifeexp$income.composition.of.resources)$residuals ~ lm(lifeexp$life.expectancy ~ lifeexp$income.composition.of.resources)$fitted.values, xlab = "Fitted Values", ylab = "Residuals")
abline(h = 0, col = "red")
reg_model <- lm(life.expectancy ~ income.composition.of.resources, data = lifeexp)
summary(reg_model)
cor(lifeexp$life.expectancy, lifeexp$income.composition.of.resources)
summary(reg_model)$r.squared
plot(lifeexp$infant.deaths, lifeexp$life.expectancy, xlab = "Infant deaths", ylab = "Life expectancy")
plot(lifeexp$BMI, lifeexp$life.expectancy, xlab = "BMI", ylab = "Life expectancy")
plot(lifeexp$measles, lifeexp$life.expectancy, xlab = "Measles", ylab = "Life expectancy")
# Check linearity assumption
plot(lifeexp$infant.deaths, residuals(lm(life.expectancy ~ infant.deaths + BMI + measles, data = lifeexp)),
xlab = "Infant deaths", ylab = "Residuals")
plot(lifeexp$BMI, residuals(lm(life.expectancy ~ infant.deaths + BMI + measles, data = lifeexp)),
xlab = "BMI", ylab = "Residuals")
plot(lifeexp$measles, residuals(lm(life.expectancy ~ infant.deaths + BMI + measles, data = lifeexp)),
xlab = "Measles", ylab = "Residuals")
qqnorm(residuals(lm(life.expectancy ~ infant.deaths + BMI + measles, data = lifeexp)))
qqline(residuals(lm(life.expectancy ~ infant.deaths + BMI + measles, data = lifeexp)))
plot(fitted(lm(life.expectancy ~ infant.deaths + BMI + measles, data = lifeexp)),
residuals(lm(life.expectancy ~ infant.deaths + BMI + measles, data = lifeexp)),
xlab = "Fitted values", ylab = "Residuals")
model <- lm(life.expectancy ~ infant.deaths + BMI + measles, data = lifeexp)
summary(model)
# Hypothesis test for infant deaths
model1 <- lm(life.expectancy ~ infant.deaths, data = lifeexp)
summary(model1)
# Hypothesis test for BMI
model2 <- lm(life.expectancy ~ BMI, data = lifeexp)
summary(model2)
# Hypothesis test for measles
model3 <- lm(life
plot(lifeexp$infant.deaths, lifeexp$life.expectancy, xlab = "Infant deaths", ylab = "Life expectancy")
plot(lifeexp$BMI, lifeexp$life.expectancy, xlab = "BMI", ylab = "Life expectancy")
plot(lifeexp$measles, lifeexp$life.expectancy, xlab = "Measles", ylab = "Life expectancy")
# Check linearity assumption
plot(lifeexp$infant.deaths, residuals(lm(life.expectancy ~ infant.deaths + BMI + measles, data = lifeexp)),
xlab = "Infant deaths", ylab = "Residuals")
plot(lifeexp$BMI, residuals(lm(life.expectancy ~ infant.deaths + BMI + measles, data = lifeexp)),
xlab = "BMI", ylab = "Residuals")
plot(lifeexp$measles, residuals(lm(life.expectancy ~ infant.deaths + BMI + measles, data = lifeexp)),
xlab = "Measles", ylab = "Residuals")
qqnorm(residuals(lm(life.expectancy ~ infant.deaths + BMI + measles, data = lifeexp)))
qqline(residuals(lm(life.expectancy ~ infant.deaths + BMI + measles, data = lifeexp)))
plot(fitted(lm(life.expectancy ~ infant.deaths + BMI + measles, data = lifeexp)),
residuals(lm(life.expectancy ~ infant.deaths + BMI + measles, data = lifeexp)),
xlab = "Fitted values", ylab = "Residuals")
model <- lm(life.expectancy ~ infant.deaths + BMI + measles, data = lifeexp)
summary(model)
# Hypothesis test for infant deaths
model1 <- lm(life.expectancy ~ infant.deaths, data = lifeexp)
summary(model1)
# Hypothesis test for BMI
model2 <- lm(life.expectancy ~ BMI, data = lifeexp)
summary(model2)
# Hypothesis test for measles
model3 <- lm(life.expectancy ~ measles, data = lifeexp)
summary(model3)
boxplot(lifeexp$measles ~ lifeexp$continent, xlab = "Continent", ylab = "Measles")
measles_model <- aov(measles ~ continent, data = lifeexp)
summary(measles_model)
tukey_test <- TukeyHSD(measles_model)
tukey_test
boxplot(lifeexp$under.five.deaths ~ lifeexp$thin_child, main = "Boxplot of Under Five Deaths by Thin Child", xlab = "Thin Child", ylab = "Under Five Deaths")
# Check for normality assumption using Q-Q plot
qqnorm(lifeexp$under.five.deaths)
qqline(lifeexp$under.five.deaths)
result <- aov(lifeexp$under.five.deaths ~ lifeexp$thin_child)
summary(result)
TukeyHSD(result)
fit <- aov(life.expectancy ~ continent * mortality_level, data = lifeexp)
summary(fit)
chisq.test(lifeexp$mortality_level, lifeexp$thin_youth, correct = FALSE, conf.level = 0.98)
table <- table(lifeexp$mortality_level,lifeexp$thin_youth)
table
chisq.test(table,correct=FALSE)
install.packages("tinytex")
install.packages("tinytex")
install.packages("tinytex")
tinytex::tlmgr_update()
tinytex::tlmgr_update()
tinytex::tlmgr_update()
install.packages()
library()
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
tinytex::reinstall_tinytex()
pdflatex Project-2.tex
pdflatex Project-2.tex
pdflatex Project-2.tex
update.packages(ask = FALSE, checkBuilt = TRUE)
update.packages(ask = FALSE, checkBuilt = TRUE)
update.packages(ask = FALSE, checkBuilt = TRUE)
update.packages(ask = FALSE, checkBuilt = TRUE)
library(tinytex)
pdflatex Project-2.tex
install_tinytex(
force = FALSE,
dir = "auto",
version = "daily",
bundle = "TinyTeX-1",
repository = "auto",
extra_packages = if (is_tinytex()) tl_pkgs(),
add_path = TRUE
)
library(tinytex)
install.packages(c("boot", "class", "codetools", "foreign", "lattice", "MASS", "Matrix", "mgcv", "nlme", "spatial", "survival"), lib="C:/Users/adity/AppData/Local/R/cache/R/renv/sandbox/R-4.2/x86_64-w64-mingw32/30182023")
pdflatex Project-2.tex
update.packages(ask = FALSE, checkBuilt = TRUE)
renv::restore(packages = "renv")
install.packages("tinytex")
library(tinytex)
tinytex::tlmgr_update()
